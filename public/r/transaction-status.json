{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "transaction-status",
  "type": "registry:component",
  "title": "Transaction Status",
  "description": "Display transaction status and tracking",
  "registryDependencies": [
    "card",
    "badge"
  ],
  "files": [
    {
      "path": "registry/new-york/transactionKit/status/status.tsx",
      "content": "\"use client\";\n\nimport { Alert, AlertDescription, AlertTitle } from \"@/registry/new-york/ui/alert\";\nimport { Card, CardContent, } from \"@/registry/new-york/ui/card\";\nimport { Button } from \"@/registry/new-york/ui/button\";\nimport { LoaderCircle, CheckCircle2, XCircle } from \"lucide-react\";\n\nexport type TransactionStatus = \"idle\" | \"sending\" | \"confirming\" | \"success\" | \"error\";\n\ninterface SolanaTransactionStatusProps {\n  status: TransactionStatus;\n  txid?: string;\n  error?: string;\n  onReset?: () => void;\n}\n\nexport const Status = ({\n  status,\n  txid,\n  error,\n  onReset,\n}: SolanaTransactionStatusProps) => {\n  if (status === \"idle\") {\n    return null;\n  }\n\n  const renderContent = () => {\n    switch (status) {\n      case \"sending\":\n        return (\n          <div className=\"flex flex-col items-center gap-4 p-6\">\n            <LoaderCircle className=\"h-10 w-10 animate-spin text-primary\" />\n            <p className=\"text-lg font-medium\">Submitting Transaction...</p>\n            <p className=\"text-sm text-muted-foreground\">Please approve the transaction in your wallet.</p>\n          </div>\n        );\n      case \"confirming\":\n        return (\n          <div className=\"flex flex-col items-center gap-4 p-6\">\n            <LoaderCircle className=\"h-10 w-10 animate-spin text-primary\" />\n            <p className=\"text-lg font-medium\">Confirming Transaction</p>\n            <p className=\"text-sm text-muted-foreground break-all\">\n              TxID: {txid ? `${txid.slice(0, 10)}...${txid.slice(-10)}` : \"...\"}\n            </p>\n          </div>\n        );\n      case \"success\":\n        return (\n          <Alert variant=\"default\" className=\"border-green-500 bg-green-50 text-green-800\">\n            <CheckCircle2 className=\"h-5 w-5 text-green-500\" />\n            <AlertTitle>Transaction Confirmed!</AlertTitle>\n            <AlertDescription className=\"mt-2\">\n              Your transfer was successful.\n              <a\n                href={`https://solscan.io/tx/${txid}`}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"mt-2 block font-semibold text-green-600 underline\"\n              >\n                View on SolScan\n              </a>\n            </AlertDescription>\n          </Alert>\n        );\n      case \"error\":\n        return (\n          <Alert variant=\"destructive\">\n            <XCircle className=\"h-5 w-5\" />\n            <AlertTitle>Transaction Failed</AlertTitle>\n            <AlertDescription className=\"mt-2\">\n              {error || \"An unknown error occurred.\"}\n            </AlertDescription>\n            {onReset && \n              <div>\n                <Button onClick={onReset} variant=\"secondary\">Try Again</Button>\n              </div>\n              }\n          </Alert>\n        );\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <Card className=\"w-full max-w-md\">\n      <CardContent className=\"p-4\">\n        {renderContent()}\n      </CardContent>\n    </Card>\n  );\n};",
      "type": "registry:component"
    },
    {
      "path": "registry/new-york/transactionKit/status/egSender.tsx",
      "content": "\"use client\";\n\nimport React, { useState } from \"react\";\nimport { Button } from \"@/registry/new-york/ui/button\";\nimport { Status, TransactionStatus } from \"@/registry/new-york/transactionKit/status/status\";\n\nexport const TokenSender = () => {\n  const [status, setStatus] = useState<TransactionStatus>(\"idle\");\n  const [txid, setTxid] = useState<string | undefined>(undefined);\n  const [error, setError] = useState<string | undefined>(undefined);\n  \n  const handleSendTransaction = async () => {\n    setStatus(\"sending\");\n    setError(undefined);\n    setTxid(undefined);\n\n    try {\n\n      await new Promise(resolve => setTimeout(resolve, 2000));\n      \n      const simulatedTxid = \"5y5tC6jC2f7g2gK8d...FAKE_SIGNATURE...gHjJkL9mNn2pQrS\";\n      setTxid(simulatedTxid);\n      \n      \n      setStatus(\"confirming\");\n      \n      await new Promise(resolve => setTimeout(resolve, 4000));\n\n      const shouldFail = Math.random() < 0.2;\n      if (shouldFail) {\n        throw new Error(\"Simulation: Transaction not confirmed by the network.\");\n      }\n      setStatus(\"success\");\n     \n      \n    } catch (err: any) {\n      setError(err.message || \"An unexpected error occurred.\");\n      setStatus(\"error\");\n    }\n  };\n  \n  const handleReset = () => {\n    setStatus(\"idle\");\n    setTxid(undefined);\n    setError(undefined);\n  };\n\n  return (\n    <div className=\"flex flex-col items-center justify-center \">\n      {status === \"idle\" && (\n        <Button onClick={handleSendTransaction} size=\"lg\">\n          Send 0.01 USDC\n        </Button>\n      )}\n      <Status\n        status={status}\n        txid={txid}\n        error={error}\n        onReset={handleReset}\n      />\n    </div>\n  );\n};",
      "type": "registry:component"
    }
  ]
}