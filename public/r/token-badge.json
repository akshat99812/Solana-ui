{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "token-badge",
  "type": "registry:component",
  "title": "Token Badge",
  "description": "Displays a token badge with icon and symbol",
  "registryDependencies": [
    "badge"
  ],
  "files": [
    {
      "path": "registry/new-york/tokens/token-badge.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { Shield, ShieldCheck, ShieldAlert, AlertTriangle, CheckCircle2, Info } from \"lucide-react\";\nimport { Token } from \"@/registry/new-york/hooks/useToken\";\nimport { Badge } from \"@/registry/new-york/ui/badge\";\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/registry/new-york/ui/tooltip\";\n\ninterface TokenVerificationBadgeProps {\n  token?: Token;\n  variant?: \"icon\" | \"badge\" | \"full\";\n  className?: string;\n}\n\ntype VerificationLevel = \"verified\" | \"known\" | \"warning\" | \"unverified\";\n\ninterface VerificationData {\n  level: VerificationLevel;\n  label: string;\n  description: string;\n  icon: React.ReactNode;\n  color: string;\n  bgColor: string;\n  borderColor: string;\n}\n\n// Known verified token addresses (you can expand this list)\nconst VERIFIED_TOKENS = new Set([\n  \"So11111111111111111111111111111111111111112\", // Wrapped SOL\n  \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\", // USDC\n  \"Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB\", // USDT\n  \"mSoLzYCxHdYgdzU16g5QSh3i5K3z3KZK7ytfqcJm7So\", // mSOL\n  \"7dHbWXmci3dT8UFYWYZweBLXgycu7Y3iL6trKn1Y7ARj\", // stSOL\n  \"DezXAZ8z7PnrnRJjz3wXBoRgixCa6xjnB7YaB1pPB263\", // Bonk\n  \"JUPyiwrYJFskUPiHa7hkeR8VUtAeFoSYbKedZNsDvCN\", // Jupiter\n]);\n\nconst KNOWN_TOKENS = new Set([\n  \"7vfCXTUXx5WJV5JADk17DUJ4ksgau7utNKj4b963voxs\", // BONK (alternative)\n  \"Saber2gLauYim4Mvftnrasomsv6NvAuncvMEZwcLpD1\", // SBR\n]);\n\n// Warning tokens (scam/suspicious - example list)\nconst WARNING_TOKENS = new Set([\n  // Add known scam token addresses here\n]);\n\nexport function TokenVerificationBadge({ \n  token, \n  variant = \"badge\",\n  className = \"\" \n}: TokenVerificationBadgeProps) {\n  \n  if(!token){\n    return <div>\n    \n    </div>\n  }\n  const getVerificationLevel = (): VerificationData => {\n    const address = token.address;\n    const hasVerifiedTag = token.tags?.includes(\"verified\") || token.tags?.includes(\"community-verified\");\n    \n    if (VERIFIED_TOKENS.has(address) || hasVerifiedTag) {\n      return {\n        level: \"verified\",\n        label: \"Verified\",\n        description: \"This token has been verified as authentic by Solana ecosystem validators.\",\n        icon: <ShieldCheck className=\"h-4 w-4\" />,\n        color: \"text-emerald-400\",\n        bgColor: \"bg-emerald-500/20\",\n        borderColor: \"border-emerald-500/30\",\n      };\n    }\n\n    if (KNOWN_TOKENS.has(address) || token.tags?.includes(\"known\")) {\n      return {\n        level: \"known\",\n        label: \"Known\",\n        description: \"This token is recognized in the ecosystem but not officially verified.\",\n        icon: <CheckCircle2 className=\"h-4 w-4\" />,\n        color: \"text-blue-400\",\n        bgColor: \"bg-blue-500/20\",\n        borderColor: \"border-blue-500/30\",\n      };\n    }\n\n    if (WARNING_TOKENS.has(address) || token.tags?.includes(\"warning\")) {\n      return {\n        level: \"warning\",\n        label: \"Warning\",\n        description: \"This token has been flagged as potentially suspicious. Exercise extreme caution.\",\n        icon: <ShieldAlert className=\"h-4 w-4\" />,\n        color: \"text-red-400\",\n        bgColor: \"bg-red-500/20\",\n        borderColor: \"border-red-500/30\",\n      };\n    }\n\n    return {\n      level: \"unverified\",\n      label: \"Unverified\",\n      description: \"This token has not been verified. Always do your own research before interacting.\",\n      icon: <AlertTriangle className=\"h-4 w-4\" />,\n      color: \"text-yellow-400\",\n      bgColor: \"bg-yellow-500/20\",\n      borderColor: \"border-yellow-500/30\",\n    };\n  };\n\n  const verification = getVerificationLevel();\n\n  // Icon only variant\n  if (variant === \"icon\") {\n    return (\n      <TooltipProvider>\n        <Tooltip>\n          <TooltipTrigger asChild>\n            <div className={`inline-flex ${verification.color} ${className}`}>\n              {verification.icon}\n            </div>\n          </TooltipTrigger>\n          <TooltipContent \n            side=\"top\" \n            className=\"max-w-xs bg-gray-900/95 backdrop-blur-xl border-white/20\"\n          >\n            <div className=\"space-y-1\">\n              <p className=\"font-semibold text-white flex items-center gap-2\">\n                {verification.icon}\n                {verification.label}\n              </p>\n              <p className=\"text-xs text-gray-300\">{verification.description}</p>\n            </div>\n          </TooltipContent>\n        </Tooltip>\n      </TooltipProvider>\n    );\n  }\n\n  // Badge variant\n  if (variant === \"badge\") {\n    return (\n      <TooltipProvider>\n        <Tooltip>\n          <TooltipTrigger asChild>\n            <Badge \n              className={`\n                ${verification.bgColor} \n                ${verification.borderColor} \n                ${verification.color}\n                border backdrop-blur-sm font-medium transition-all duration-200 hover:scale-105\n                ${className}\n              `}\n            >\n              {verification.icon}\n              <span className=\"ml-1\">{verification.label}</span>\n            </Badge>\n          </TooltipTrigger>\n          <TooltipContent \n            side=\"top\" \n            className=\"max-w-xs bg-gray-900/95 backdrop-blur-xl border-white/20\"\n          >\n            <p className=\"text-xs text-gray-300\">{verification.description}</p>\n          </TooltipContent>\n        </Tooltip>\n      </TooltipProvider>\n    );\n  }\n\n  // Full variant with detailed info\n  return (\n    <div \n      className={`\n        flex items-start gap-3 rounded-lg \n        ${verification.bgColor} \n        ${verification.borderColor}\n        border p-4 backdrop-blur-sm transition-all duration-300 hover:scale-[1.02]\n        ${className}\n      `}\n    >\n      <div className={`${verification.color} mt-0.5`}>\n        {verification.icon}\n      </div>\n      <div className=\"flex-1 space-y-1\">\n        <p className={`font-semibold ${verification.color}`}>\n          {verification.label}\n        </p>\n        <p className=\"text-xs text-gray-300 leading-relaxed\">\n          {verification.description}\n        </p>\n        \n        {/* Additional context for verified tokens */}\n        {verification.level === \"verified\" && (\n          <div className=\"mt-2 flex items-center gap-2 text-xs text-emerald-300\">\n            <Info className=\"h-3 w-3\" />\n            <span>Official token validated by ecosystem</span>\n          </div>\n        )}\n        \n        {/* Warning for unverified tokens */}\n        {verification.level === \"unverified\" && (\n          <div className=\"mt-2 flex items-center gap-2 text-xs text-yellow-300\">\n            <Info className=\"h-3 w-3\" />\n            <span>Always verify token details before trading</span>\n          </div>\n        )}\n        \n        {/* Critical warning for flagged tokens */}\n        {verification.level === \"warning\" && (\n          <div className=\"mt-2 flex items-center gap-2 text-xs text-red-300 font-medium\">\n            <AlertTriangle className=\"h-3 w-3\" />\n            <span>Do not interact with this token</span>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\n// Helper component for quick verification check\nexport function QuickVerificationIcon({ token }: { token: Token }) {\n  return <TokenVerificationBadge token={token} variant=\"icon\" />;\n}\n\n// Helper function to check if token is verified\nexport function isTokenVerified(token: Token): boolean {\n  return VERIFIED_TOKENS.has(token.address) || \n         token.tags?.includes(\"verified\") || \n         token.tags?.includes(\"community-verified\") || \n         false;\n}\n\n// Helper function to get verification level\nexport function getTokenVerificationLevel(token: Token): VerificationLevel {\n  if (VERIFIED_TOKENS.has(token.address) || token.tags?.includes(\"verified\")) {\n    return \"verified\";\n  }\n  if (KNOWN_TOKENS.has(token.address) || token.tags?.includes(\"known\")) {\n    return \"known\";\n  }\n  if (WARNING_TOKENS.has(token.address) || token.tags?.includes(\"warning\")) {\n    return \"warning\";\n  }\n  return \"unverified\";\n}",
      "type": "registry:component"
    }
  ]
}