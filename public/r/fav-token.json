{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "fav-token",
  "type": "registry:component",
  "title": "Favorite Token",
  "description": "Displays favorite token with quick actions",
  "registryDependencies": [
    "card",
    "button"
  ],
  "files": [
    {
      "path": "registry/new-york/tokens/fav-token.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { Star, Trash2, ArrowUpDown } from \"lucide-react\";\nimport { Token } from \"@/registry/new-york/hooks/useToken\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/registry/new-york/ui/avatar\";\nimport { Button } from \"@/components/ui/button\";\nimport { ScrollArea } from \"@/registry/new-york/ui/scroll-area\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\n\ninterface FavoriteTokensProps {\n  onSelectToken?: (token: Token) => void;\n  className?: string;\n}\n\ntype SortOption = \"name\" | \"symbol\" | \"recent\";\n\nexport function FavoriteTokens({ onSelectToken, className }: FavoriteTokensProps) {\n  const [favorites, setFavorites] = React.useState<Token[]>([]);\n  const [sortBy, setSortBy] = React.useState<SortOption>(\"recent\");\n\n  // Load favorites from memory on mount\n  React.useEffect(() => {\n    const stored = (window as any).favoriteTokens || [];\n    setFavorites(stored);\n  }, []);\n\n  // Save to memory whenever favorites change\n  React.useEffect(() => {\n    (window as any).favoriteTokens = favorites;\n  }, [favorites]);\n\n  const removeFavorite = (address: string) => {\n    setFavorites((prev) => prev.filter((token) => token.address !== address));\n  };\n\n  const sortedFavorites = React.useMemo(() => {\n    const sorted = [...favorites];\n    switch (sortBy) {\n      case \"name\":\n        return sorted.sort((a, b) => a.name.localeCompare(b.name));\n      case \"symbol\":\n        return sorted.sort((a, b) => a.symbol.localeCompare(b.symbol));\n      case \"recent\":\n      default:\n        return sorted.reverse();\n    }\n  }, [favorites, sortBy]);\n\n  return (\n    <Card className={`group relative overflow-hidden border-0 bg-gradient-to-br from-white/10 via-white/5 to-transparent backdrop-blur-2xl shadow-2xl ${className}`}>\n      {/* Animated gradient background */}\n      <div className=\"absolute -inset-1 rounded-lg bg-gradient-to-r from-amber-600 via-orange-600 to-yellow-600 opacity-20 blur-2xl transition-all duration-500 group-hover:opacity-40\" />\n      \n      {/* Glass effect border */}\n      <div className=\"absolute inset-0 rounded-lg border border-white/20\" />\n\n      <CardHeader className=\"relative z-10 flex flex-row items-center justify-between border-b border-white/10 p-6\">\n        <CardTitle className=\"flex items-center gap-2 text-transparent bg-clip-text bg-gradient-to-r from-amber-300 to-yellow-300\">\n          <Star className=\"h-5 w-5 fill-amber-400 text-amber-400\" />\n          Favorite Tokens\n        </CardTitle>\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"h-8 text-gray-400 hover:bg-white/10 hover:text-white\"\n            >\n              <ArrowUpDown className=\"h-4 w-4 mr-2\" />\n              Sort\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent align=\"end\" className=\"bg-gray-900/95 backdrop-blur-xl border-white/20\">\n            <DropdownMenuItem onClick={() => setSortBy(\"recent\")} className=\"text-gray-200\">\n              Recent\n            </DropdownMenuItem>\n            <DropdownMenuItem onClick={() => setSortBy(\"name\")} className=\"text-gray-200\">\n              Name\n            </DropdownMenuItem>\n            <DropdownMenuItem onClick={() => setSortBy(\"symbol\")} className=\"text-gray-200\">\n              Symbol\n            </DropdownMenuItem>\n          </DropdownMenuContent>\n        </DropdownMenu>\n      </CardHeader>\n\n      <CardContent className=\"relative z-10 p-0\">\n        {sortedFavorites.length === 0 ? (\n          <div className=\"flex flex-col items-center justify-center py-12 px-6 text-center\">\n            <Star className=\"h-12 w-12 text-gray-600 mb-3\" />\n            <p className=\"text-gray-400 text-sm\">No favorite tokens yet</p>\n            <p className=\"text-gray-500 text-xs mt-1\">Star tokens to add them here</p>\n          </div>\n        ) : (\n          <ScrollArea className=\"h-[400px]\">\n            <div className=\"p-4 space-y-2\">\n              {sortedFavorites.map((token, index) => (\n                <div\n                  key={token.address}\n                  className=\"group/item flex items-center justify-between rounded-lg bg-white/5 p-3 backdrop-blur-sm transition-all duration-300 hover:bg-white/10 hover:scale-[1.02]\"\n                  style={{\n                    animationDelay: `${index * 50}ms`,\n                  }}\n                >\n                  <div\n                    className=\"flex flex-1 items-center gap-3 cursor-pointer\"\n                    onClick={() => onSelectToken?.(token)}\n                  >\n                    <div className=\"relative\">\n                      <div className=\"absolute -inset-1 rounded-full bg-gradient-to-r from-amber-500 to-yellow-500 opacity-0 blur transition-all duration-300 group-hover/item:opacity-30\" />\n                      <Avatar className=\"relative h-10 w-10 ring-2 ring-white/10 transition-all duration-300 group-hover/item:ring-white/30\">\n                        <AvatarImage src={token.logoURI} alt={token.name} />\n                        <AvatarFallback className=\"bg-gradient-to-br from-amber-500 to-yellow-500 text-white text-xs font-bold\">\n                          {token.symbol.slice(0, 2)}\n                        </AvatarFallback>\n                      </Avatar>\n                    </div>\n                    <div className=\"flex-1 min-w-0\">\n                      <p className=\"font-medium text-white truncate\">{token.name}</p>\n                      <p className=\"text-xs text-gray-400\">{token.symbol}</p>\n                    </div>\n                  </div>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"icon\"\n                    className=\"h-8 w-8 text-gray-400 hover:bg-red-500/20 hover:text-red-400 transition-all duration-200 opacity-0 group-hover/item:opacity-100\"\n                    onClick={() => removeFavorite(token.address)}\n                  >\n                    <Trash2 className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              ))}\n            </div>\n          </ScrollArea>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n\n// Export helper function to add favorites\nexport const addToFavorites = (token: Token) => {\n  const current = (window as any).favoriteTokens || [];\n  const exists = current.find((t: Token) => t.address === token.address);\n  if (!exists) {\n    (window as any).favoriteTokens = [...current, token];\n    // Trigger storage event to update all components\n    window.dispatchEvent(new Event('storage'));\n  }\n};\n\nexport const removeFromFavorites = (address: string) => {\n  const current = (window as any).favoriteTokens || [];\n  (window as any).favoriteTokens = current.filter((t: Token) => t.address !== address);\n  window.dispatchEvent(new Event('storage'));\n};\n\nexport const isFavorite = (address: string): boolean => {\n  const current = (window as any).favoriteTokens || [];\n  return current.some((t: Token) => t.address === address);\n};",
      "type": "registry:component"
    }
  ]
}