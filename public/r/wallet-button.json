{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "wallet-button",
  "type": "registry:component",
  "title": "Wallet Button",
  "description": "A wallet connect button component",
  "registryDependencies": [
    "button",
    "dropdown-menu"
  ],
  "files": [
    {
      "path": "registry/new-york/connectors/walletButton/walletButton.tsx",
      "content": "\"use client\";\n\nimport React from \"react\";\nimport Image from \"next/image\";\nimport { useWallet } from \"@solana/wallet-adapter-react\";\nimport {\n  ChevronDown,\n  Copy,\n  LogOut,\n  LoaderCircle,\n  Wallet as WalletIcon, \n} from \"lucide-react\";\n\nimport { Button } from \"@/registry/new-york/ui/button\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/registry/new-york/ui/dialog\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/registry/new-york/ui/dropdown-menu\";\nimport { Avatar } from \"../avatar/avatar\";\n\nexport const WalletButton = () => {\n  const {\n    select,\n    wallets,\n    publicKey,\n    disconnect,\n    connecting,\n    wallet,\n  } = useWallet();\n  const [isDialogOpen, setIsDialogOpen] = React.useState(false);\n\n  // Memoize the public key to prevent unnecessary re-renders\n  const base58 = React.useMemo(() => publicKey?.toBase58(), [publicKey]);\n\n  // Render a dropdown menu if the wallet is connected\n  if (base58 && wallet) {\n    return (\n      <div className=\"flex justify-center\">\n        <div className=\"mx-2\">\n          <Avatar address={base58}></Avatar>\n        </div>\n        <div className=\"mx-2 my-auto\">\n          <Button\n            onClick={() => disconnect()}\n            className=\"text-red-500 focus:text-red-500\"\n            variant=\"outline\"\n          >\n            <LogOut className=\" h-4 w-4\" />\n            {/*<span>Disconnect</span>*/}\n          </Button>\n        </div>\n      </div>\n    );\n  }\n  return (\n    <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n      <DialogTrigger asChild>\n        <Button variant=\"outline\" disabled={connecting}>\n          {connecting ? (\n            <LoaderCircle className=\"mr-2 h-4 w-4 animate-spin\" />\n          ) : (\n            <WalletIcon className=\"mr-2 h-4 w-4\" />\n          )}\n          Connect Wallet\n        </Button>\n      </DialogTrigger>\n      <DialogContent>\n        <DialogHeader>\n          <DialogTitle>Connect a wallet</DialogTitle>\n        </DialogHeader>\n        <div className=\"mt-4\">\n          <ul className=\"flex flex-col space-y-2\">\n            {wallets.filter((w) => w.readyState === 'Installed').map((walletItem) => (\n              <li key={walletItem.adapter.name}>\n                <Button\n                  variant=\"secondary\"\n                  className=\"w-full justify-start h-12 text-md\"\n                  onClick={() => {\n                    select(walletItem.adapter.name);\n                    setIsDialogOpen(false);\n                  }}\n                  disabled={connecting}\n                >\n                  <div className=\"flex items-center space-x-4\">\n                    <Image\n                      src={walletItem.adapter.icon}\n                      alt={walletItem.adapter.name}\n                      width={28}\n                      height={28}\n                    />\n                    <span>{walletItem.adapter.name}</span>\n                    {connecting &&\n                      wallet?.adapter.name === walletItem.adapter.name && (\n                        <LoaderCircle className=\"h-5 w-5 animate-spin\" />\n                      )}\n                  </div>\n                </Button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n};",
      "type": "registry:component"
    }
  ]
}