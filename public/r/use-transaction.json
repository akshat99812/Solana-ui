{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "use-transaction",
  "type": "registry:hook",
  "title": "useTransaction Hook",
  "description": "Hook for managing transaction state and operations",
  "files": [
    {
      "path": "registry/new-york/hooks/useTransaction.tsx",
      "content": "\"use client\";\n\nimport { useState, useCallback } from \"react\";\nimport { useConnection, useWallet } from \"@solana/wallet-adapter-react\";\nimport { Transaction, VersionedTransaction } from \"@solana/web3.js\";\n\n// Re-export the status type for convenience in other components\nexport type TransactionStatus = \"idle\" | \"sending\" | \"confirming\" | \"success\" | \"error\";\n\n/**\n * A custom hook to manage the lifecycle of a Solana transaction.\n * It handles sending, confirming, and tracking the state of the transaction.\n */\nexport const useTransaction = () => {\n  const { connection } = useConnection();\n  const { sendTransaction } = useWallet();\n\n  const [status, setStatus] = useState<TransactionStatus>(\"idle\");\n  const [txid, setTxid] = useState<string | undefined>(undefined);\n  const [error, setError] = useState<string | undefined>(undefined);\n\n  /**\n   * Sends and confirms a Solana transaction.\n   * @param transaction - The VersionedTransaction or legacy Transaction to send.\n   */\n  const executeTransaction = useCallback(\n    async (transaction: VersionedTransaction | Transaction) => {\n      // Reset state before starting a new transaction\n      setStatus(\"sending\");\n      setTxid(undefined);\n      setError(undefined);\n\n      try {\n        // --- 1. Send Transaction ---\n        // This will prompt the user's wallet to sign and send.\n        const signature = await sendTransaction(transaction, connection);\n        setTxid(signature);\n        console.log(`Transaction Submitted: ${signature}`);\n\n        // --- 2. Change Status to Confirming ---\n        setStatus(\"confirming\");\n        console.log(\"Waiting for confirmation...\");\n\n        // --- 3. Confirm Transaction ---\n        const latestBlockhash = await connection.getLatestBlockhash(\"confirmed\");\n        const confirmation = await connection.confirmTransaction(\n          {\n            signature: signature,\n            blockhash: latestBlockhash.blockhash,\n            lastValidBlockHeight: latestBlockhash.lastValidBlockHeight,\n          },\n          \"confirmed\"\n        );\n\n        if (confirmation.value.err) {\n          throw new Error(`Transaction failed to confirm: ${JSON.stringify(confirmation.value.err)}`);\n        }\n\n        // --- 4. Success ---\n        setStatus(\"success\");\n        console.log(\"Transaction Successfully Confirmed!\");\n        \n      } catch (err: any) {\n        // --- 5. Handle Errors ---\n        console.error(`Transaction failed: ${err.message}`);\n        setError(err.message || \"An unexpected error occurred.\");\n        setStatus(\"error\");\n      }\n    },\n    [connection, sendTransaction]\n  );\n  \n  /**\n   * Resets the hook's state to its initial idle status.\n   */\n  const reset = useCallback(() => {\n    setStatus(\"idle\");\n    setTxid(undefined);\n    setError(undefined);\n  }, []);\n\n  return { status, txid, error, executeTransaction, reset };\n};",
      "type": "registry:hook"
    }
  ]
}