{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "token-picker",
  "type": "registry:component",
  "title": "Token Picker",
  "description": "A picker component for selecting tokens",
  "registryDependencies": [
    "popover",
    "button"
  ],
  "files": [
    {
      "path": "registry/new-york/tokens/token-picker.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { Search, Loader2 } from \"lucide-react\";\nimport { Token } from \"@/registry/new-york/hooks/useToken\";\nimport { cn } from \"@/lib/utils\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { ScrollArea } from \"@/registry/new-york/ui/scroll-area\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/registry/new-york/ui/avatar\";\n\n\n\nexport interface TokenPickerProps {\n  onSelectToken: (token: Token) => void;\n  children: React.ReactNode;\n  title?: string;\n  className?: string;\n  heliusApi: string;\n}\n\n// Helius DAS API endpoint\n\n\nexport function TokenPicker({\n  onSelectToken,\n  children,\n  title = \"Select a token\",\n  className,\n  heliusApi,\n}: TokenPickerProps) {\n  const [open, setOpen] = React.useState(false);\n  const [searchQuery, setSearchQuery] = React.useState(\"\");\n  const [tokens, setTokens] = React.useState<Token[]>([]);\n  const [isLoading, setIsLoading] = React.useState<boolean>(false);\n  const [error, setError] = React.useState<Error | null>(null);\n  \n\n  // Fetch popular tokens or search results using Helius\n  React.useEffect(() => {\n    if (open && tokens.length === 0) {\n      const fetchPopularTokens = async () => {\n        setIsLoading(true);\n        setError(null);\n        try {\n          // Fetch popular SPL tokens metadata using Helius DAS API\n          const popularTokenMints = [\n            \"So11111111111111111111111111111111111111112\", // Wrapped SOL\n            \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\", // USDC\n            \"Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB\", // USDT\n            \"7vfCXTUXx5WJV5JADk17DUJ4ksgau7utNKj4b963voxs\", // BONK\n            \"DezXAZ8z7PnrnRJjz3wXBoRgixCa6xjnB7YaB1pPB263\", // Bonk\n            \"mSoLzYCxHdYgdzU16g5QSh3i5K3z3KZK7ytfqcJm7So\", // mSOL\n            \"7dHbWXmci3dT8UFYWYZweBLXgycu7Y3iL6trKn1Y7ARj\", // stSOL\n            \"JUPyiwrYJFskUPiHa7hkeR8VUtAeFoSYbKedZNsDvCN\", // JUP\n          ];\n\n          const response = await fetch(heliusApi, {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({\n              jsonrpc: \"2.0\",\n              id: \"token-picker\",\n              method: \"getAssetBatch\",\n              params: {\n                ids: popularTokenMints,\n              },\n            }),\n          });\n\n          if (!response.ok) {\n            throw new Error(`Failed to fetch tokens: ${response.statusText}`);\n          }\n\n          const data = await response.json();\n          \n          if (data.error) {\n            throw new Error(data.error.message);\n          }\n\n          // Transform Helius response to Token format\n          const transformedTokens: Token[] = data.result\n            .filter((asset: any) => asset)\n            .map((asset: any) => ({\n              address: asset.id,\n              name: asset.content?.metadata?.name || \"Unknown\",\n              symbol: asset.content?.metadata?.symbol || \"???\",\n              decimals: asset.token_info?.decimals || 9,\n              logoURI: asset.content?.links?.image || asset.content?.files?.[0]?.uri || \"\",\n            }));\n\n          setTokens(transformedTokens);\n        } catch (e) {\n          setError(e instanceof Error ? e : new Error(\"An unknown error occurred\"));\n        } finally {\n          setIsLoading(false);\n        }\n      };\n      fetchPopularTokens();\n    }\n  }, [open, tokens.length, heliusApi]);\n\n  // Search for token by address using Helius\n  const searchTokenByAddress = React.useCallback(\n    async (address: string) => {\n      if (address.length < 32) return;\n\n      setIsLoading(true);\n      setError(null);\n      try {\n        \n        const response = await fetch(heliusApi, {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({\n            jsonrpc: '2.0',\n            id: '1',\n            method: 'getTokenAccountBalance',\n            params: [\n              address\n            ]\n          })\n        });\n        const data = await response.json();\n        console.log(data);\n\n        if (data.error) {\n          setError(new Error(\"Token not found\"));\n          return;\n        }\n\n        const asset = data.result;\n        const searchedToken: Token = {\n          address: asset.id,\n          name: asset.content?.metadata?.name || \"Unknown\",\n          symbol: asset.content?.metadata?.symbol || \"???\",\n          decimals: asset.token_info?.decimals || 9,\n          logoURI: asset.content?.links?.image || asset.content?.files?.[0]?.uri || \"\",\n        };\n\n        // Add to tokens list if not already present\n        setTokens((prev) => {\n          const exists = prev.find((t) => t.address === searchedToken.address);\n          return exists ? prev : [searchedToken, ...prev];\n        });\n      } catch (e) {\n        setError(e instanceof Error ? e : new Error(\"Failed to search token\"));\n      } finally {\n        setIsLoading(false);\n      }\n    },\n    [heliusApi]\n  );\n\n  // Trigger search when user types a potential address\n  React.useEffect(() => {\n    const isAddress = /^[1-9A-HJ-NP-Za-km-z]{32,44}$/.test(searchQuery);\n    if (isAddress) {\n      const timer = setTimeout(() => {\n        searchTokenByAddress(searchQuery);\n      }, 500);\n      return () => clearTimeout(timer);\n    }\n  }, [searchQuery, searchTokenByAddress]);\n\n  const filteredTokens = React.useMemo(() => {\n    if (!searchQuery) return tokens;\n    const lowercasedQuery = searchQuery.toLowerCase();\n    return tokens.filter(\n      (token) =>\n        token.name.toLowerCase().includes(lowercasedQuery) ||\n        token.symbol.toLowerCase().includes(lowercasedQuery) ||\n        token.address.toLowerCase().includes(lowercasedQuery)\n    );\n  }, [searchQuery, tokens]);\n\n  const handleSelect = (token: Token) => {\n    onSelectToken(token);\n    setOpen(false);\n  };\n\n  React.useEffect(() => {\n    if (!open) setSearchQuery(\"\");\n  }, [open]);\n\n  const renderContent = () => {\n    if (isLoading) {\n      return (\n        <div className=\"flex h-[280px] items-center justify-center\">\n          <Loader2 className=\"h-8 w-8 animate-spin text-muted-foreground\" />\n        </div>\n      );\n    }\n    if (error) {\n      return (\n        <div className=\"flex h-[280px] items-center justify-center text-center text-destructive\">\n          <p>Error: {error.message}</p>\n        </div>\n      );\n    }\n    if (filteredTokens.length === 0) {\n      return (\n        <div className=\"flex h-[280px] items-center justify-center text-center text-sm text-muted-foreground\">\n          <p>No tokens found. Try pasting a token address.</p>\n        </div>\n      );\n    }\n    return filteredTokens.map((token) => (\n      <div\n        key={token.address}\n        onClick={() => handleSelect(token)}\n        className=\"flex cursor-pointer items-center gap-3 rounded-md p-2 text-sm hover:bg-accent\"\n      >\n        <Avatar className=\"h-8 w-8\">\n          <AvatarImage src={token.logoURI} alt={token.name} />\n          <AvatarFallback>{token.symbol.slice(0, 2)}</AvatarFallback>\n        </Avatar>\n        <div className=\"flex flex-col\">\n          <span className=\"font-medium\">{token.name}</span>\n          <span className=\"text-xs text-muted-foreground\">{token.symbol}</span>\n        </div>\n      </div>\n    ));\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={setOpen}>\n      <DialogTrigger asChild>{children}</DialogTrigger>\n      <DialogContent className={cn(\"sm:max-w-[425px]\", className)}>\n        <DialogHeader>\n          <DialogTitle>{title}</DialogTitle>\n          <DialogDescription>Search by name, symbol, or paste address.</DialogDescription>\n        </DialogHeader>\n        <div className=\"relative\">\n          <Search className=\"absolute left-2 top-2.5 h-4 w-4 text-muted-foreground\" />\n          <Input\n            placeholder=\"Search tokens or paste address...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"pl-8\"\n          />\n        </div>\n        <ScrollArea className=\"h-[300px] w-full pr-4\">\n          <div className=\"flex flex-col gap-1 py-1\">{renderContent()}</div>\n        </ScrollArea>\n      </DialogContent>\n    </Dialog>\n  );\n}",
      "type": "registry:component"
    }
  ]
}