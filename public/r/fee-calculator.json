{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "fee-calculator",
  "type": "registry:component",
  "title": "Fee Calculator",
  "description": "Calculate transaction fees",
  "registryDependencies": [
    "card",
    "input"
  ],
  "files": [
    {
      "path": "registry/new-york/transactionKit/feeCalculator/feeCalculator.tsx",
      "content": "\"use client\";\n\nimport React, { useState, useEffect } from \"react\";\nimport { Settings } from \"lucide-react\";\nimport { Button } from \"@/registry/new-york/ui/button\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/registry/new-york/ui/popover\";\nimport { Label } from \"@/registry/new-york/ui/label\";\nimport { Input } from \"@/registry/new-york/ui/input\";\n\nconst SLIPPAGE_PRESETS = [10, 50, 100]; // 0.1%, 0.5%, 1%\nconst PRIORITY_FEE_PRESETS = [10000, 50000, 100000]; // Low, Medium, High\n\n// Define the props the component will accept\ninterface TransactionSettingsProps {\n  priorityFee: number;\n  slippageBps: number;\n  onPriorityFeeChange: (fee: number) => void;\n  onSlippageBpsChange: (bps: number) => void;\n}\n\nexport const TransactionSettings = ({\n  priorityFee,\n  slippageBps,\n  onPriorityFeeChange,\n  onSlippageBpsChange,\n}: TransactionSettingsProps) => {\n  // Local state for the custom input fields remains for a better UX\n  const [customSlippage, setCustomSlippage] = useState((slippageBps / 100).toString());\n  const [customPriorityFee, setCustomPriorityFee] = useState(priorityFee.toString());\n\n  // Update local input state if the incoming prop changes\n  useEffect(() => {\n    setCustomSlippage((slippageBps / 100).toString());\n    console.log(slippageBps);\n  }, [slippageBps]);\n\n  useEffect(() => {\n    setCustomPriorityFee(priorityFee.toString());\n  }, [priorityFee]);\n\n  const handleSlippageChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value;\n    setCustomSlippage(value);\n    if (value && !isNaN(parseFloat(value))) {\n      // Call the callback prop to notify the parent of the change\n      onSlippageBpsChange(Math.round(parseFloat(value) * 100));\n    }\n  };\n\n  const handlePriorityFeeChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value;\n    setCustomPriorityFee(value);\n    if (value && !isNaN(parseInt(value))) {\n      // Call the callback prop to notify the parent of the change\n      onPriorityFeeChange(parseInt(value));\n    }\n  };\n  \n  return (\n    <Popover>\n      <PopoverTrigger asChild>\n        <Button variant=\"outline\" size=\"icon\">\n          <Settings className=\"h-4 w-4\" />\n          <span className=\"sr-only\">Transaction Settings</span>\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-80\" align=\"end\">\n        <div className=\"grid gap-4\">\n          <div className=\"space-y-2\">\n            <h4 className=\"font-medium leading-none\">Settings</h4>\n            <p className=\"text-sm text-muted-foreground\">\n              Customize your transaction settings.\n            </p>\n          </div>\n          <div className=\"grid gap-2\">\n            <Label htmlFor=\"slippage\">Slippage Tolerance</Label>\n            <div className=\"flex items-center gap-2\">\n              {SLIPPAGE_PRESETS.map((bps) => (\n                <Button\n                  key={bps}\n                  variant={slippageBps === bps ? \"secondary\" : \"outline\"}\n                  className=\"flex-1\"\n                  onClick={() => onSlippageBpsChange(bps)}\n                >\n                  {bps / 100}%\n                </Button>\n              ))}\n              <div className=\"relative flex-1\">\n                <Input\n                  id=\"slippage\"\n                  value={customSlippage}\n                  onChange={handleSlippageChange}\n                  className=\"pr-8\"\n                />\n                <span className=\"absolute inset-y-0 right-3 flex items-center text-sm text-muted-foreground\">%</span>\n              </div>\n            </div>\n          </div>\n          <div className=\"grid gap-2\">\n            <Label htmlFor=\"priority-fee\">Priority Fee</Label>\n            <div className=\"flex items-center gap-2\">\n              {PRIORITY_FEE_PRESETS.map((fee) => (\n                 <Button\n                  key={fee}\n                  variant={priorityFee === fee ? \"secondary\" : \"outline\"}\n                  className=\"flex-1\"\n                  onClick={() => onPriorityFeeChange(fee)}\n                >\n                  {fee / 100000}k\n                </Button>\n              ))}\n              <div className=\"relative flex-1\">\n                 <Input\n                  id=\"priority-fee\"\n                  value={customPriorityFee}\n                  onChange={handlePriorityFeeChange}\n                  className=\"pr-12\"\n                />\n                 <span className=\"absolute inset-y-0 right-3 flex items-center text-sm text-muted-foreground\">Î¼Lp</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </PopoverContent>\n    </Popover>\n  );\n};",
      "type": "registry:component"
    }
  ]
}